
	@WAS(Web Application Server) - Java Enterprise Edition Server

	WAS는 Web Server + Application Server + Service의 의미다.
	웹 서버는 Jsp/Servlet을 위한 웹 컨테이너와 HTML을 서비스하는 HTTP Server가 있다.
	
	Application 서버는 비즈니스 로직을 수행하는 컨테이너가 있다
	서비스는 JNDI, JMS와 같은 것을 제공하여 다른 기능의 서버와 연결하여
	사용하게 하거나 서버 안에서 편리하게 사용 할 수 있다
	
	WAS에는 WebLogic, Zeus등 수 많은 제품이 있다
	Tomcat을 WAS라고 부르기도 한다

	-클라이언트 서버 시스템 구조에서 서버 쪽 어플리케이션의 생성과 실행,
	소멸을 관리하는 프로그램을 애플리케이션 서버라 한다
	서블릿과 서블릿 컨테이너와 같이 웹 기술을 기반으로 동작되는
	애플리케이션 서버를 WAS라 부른다


	@웹 컨테이너(Web Container)
	
	웹 서버에는 HTML을 클라이언트로 보내는 HTTP 서버 Jsp/Servlet을 실행하는 엔진,
	엔진과 Jsp/Servlet을 실행하는데 필요한 라이브러리등을 포함한 웹 컨테이너가 있다.
	웹 프로그래밍에는 웹 컨테이너가 반드시 있어야 한다.

	@서블릿(Servlet)
	서블릿은 컨테이너에서 실행되는 프로그램이다
	요청에 대한 내용을 처리하고 결과를 HTML로 만든다
	자바 코드로 구현한다
	
	@JSP(Java Server Page)
	자바 서버 페이지의 약자로 서버에서 실행되는 웹 프로그래밍용
	클래스를 말한다
	jsp로 된 파일은 서블릿으로 변환된다
	jsp도 서블릿임으로 서블릿에서 사용하는 객체나 메서드를 jsp에서도
	사용 할 수 있다

	@웹 프로젝트 폴더 구조
	
	-src
	자바 소스 파일을 두는 폴더
	이 폴더에서 서블릿 클래스나 필터, 리스너 등 필요한 모든 자바 클래스 파일을 둔다.
	
	-build/classes
	컴파일 된 자바 클래스 파일(.class)이 놓이는 폴더이다
	물론 패키지에 소속 된 클래스인 경우 이 폴더에 해당 패키지가 자동으로 만들어진다
	
	-WebContent
	HTML(.html), CSS(.css),Javascript(.js), jsp, 이미지 파일 등
	웹 컨텐츠를 두는 폴더이다
	웹 애플리케이션을 서버에 배치할 대 이 폴더의 내용들이 그대로 복사된다
	
	-WebContent/ WEB-INF(Information)
	웹 애플리케이션의 설정과 관련된 파일을 두는 폴더이다
	이 폴더에 있는 파일은 클라이언트에서 요청 할 수 없다
	따라서 html등의 클라이언트에서 요청 할 파일을 이 폴더에 두어서는 안 된다.
	
	-WebContent/ WEB-INF/ web.xml
	애플리케이션 배치 설명서(Deployment Descriptor) 파일이다. 
	영어 표현으로는 줄여서 DD파일이라고 부른다
	서블릿이나 필터, 매개변수, 기본 웹 페이지 등
	웹 애플리케이션 컴포넌트들의 배치 정보를 이 파일에 작성한다
	서블릿 컨테이너는 클라이언트 요청을 처리 할 때 이 파일의 정보를 참고하여 
	서블릿 클래스를 찾거나 필터를 수행하는 등의 작업을 수행한다
	엄청 중요한 것이 xml 파일이다
	
	-WebContent/ WEB-INF/ lib
	자바 아카이브 파일(.jar)을 두는 폴더이다





	@서블릿의 라이프 사이클(Life Cycle)
	웹 프로그래밍은 컨테이너가 반드시 필요하며
	프로그래밍을 엔진에서 실행하여 원하는 결과를 생성한다
	
	서블릿은 컨테이너의 명령에 따라 생성, 초기화, 실행, 소멸등
	정해진 행동을 한다
	이렇게 하는 것을 라이프 사이클이라고 한다
	서블릿은 요청을 처음으로 받으면 서블릿을 생성한다
	
	init -> service -> destroy를 호출하게 된다
	일반적으로 init 메서드를 호출하여 service를 호출한다
	서비스를 계속 수행하다 더 이상 요청이 없다면 destroy 메서드를 
	호출하여 자원을 회수하고 서블릿 객체를 제거한다
	컨테이너는 초기화와 소멸 메서드를 한 번만 호출한다


@ServletRequest -> 주소값이 왔거나 이벤트가 발생한 순간에 그 정보가 리퀘스트에 담긴다.
클라이언트의 요청 정보를 다룰 때 사용된다.


@ServletResponse -> 그 정보를 받아서 서버에서 재가공하거나 다른 화면에 제공하는 역할이다.
응답과 관련된 기능을 제공한다
클라이언트에게 출력하는 내용에 해당하는 모든 정보들이 담겨 있다

JDBC(Java DataBase Connectivity) ->이것도 API이다.
프로그램과 DB를 연결하여 데이터를 주고 받을 수 있게 해 주는 프로그래밍 인터페이스(API)

HTTP 응답 상태 코드
statecode		설명
200         요청이 성공적으로 처리됨
301         요청한 자원이 이동함, 헤더 정보에 이동 위치를 알려줄 테니 다시 요청바람
304         클라이언트가 임시 보관함 응답결과와 다르지 않다
400         잘못된 요청이다 -> 사용하는 사람의 잘못이다
404         요청한 자원을 못 찾았다
405         메서드 허용 안됨
500         서버 내부에서 오류가 발생했다 -> 우리 잘못이다





