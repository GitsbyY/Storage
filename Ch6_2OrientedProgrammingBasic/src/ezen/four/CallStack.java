package ezen.four;

public class CallStack {
	
/*
  	JVM 메모리 구조
  	
  	1. 스태틱 (static) 영역
  	프로그램 실행 중 어떤 클래스가 사용되면 JVM은 해당 클래스의 클래스 파일(*.class)을
  	읽어서 분석하여 클래스에 대한 정보(클래스 데이터)를 이곳에 저장한다
  	이때 그 클래스의 스태틱 변수도 이 영역에 함께 생성 된다
  	
  	2. 힙(heap) 영역
  	인스턴스가 생성되는 공간
  	프로그램 실행 중 생성되는 인스턴스는 모두 이 곳에 생성된다
  	인스턴스 변수들이 생성되는 공간이다
  	
  	3. 호출스택(call stack) -> stack area
  	호출 스택은 메소드의 작업에 필요한 메모리 공간을 제공한다.
  	메소드가 호출되면 호출 스택에 호출 된 메소드를 위한 메모리가 할당되며
  	이 메모리는 메소드가 작업을 수행하는 동안 지역변수(매개변수 포함)들과
  	연산의 중간결과 등을 저장하는데 사용된다
  	그리고 메소드가 작업을 마치면 할당 되었던 메모리 공간은 반환되어 비워진다.
  	
  	
  	스택의 특징
  	- 매소드가 호출되면 수행에 필요한 만큼의 메모리를 스택에 할당받는다
  	- 메소드가 수행을 마치고나면 사용했던 메모리를 반환하고 스택에서 제거된다
  	- 스택의 제일 위에 있는 메소드가 현재 실행중인 메소드이다
  	- 아래에 있는 메소드가 바로 위의 메소드를 호출한 메소드이다.
  	
  	
 */
	
	
}
